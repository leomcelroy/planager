{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Planager This is the in-progress documentation site for the Planager! Project layout src/ planager/ app/ docs/ # Documentation website things mkdocs.yml # Documentation config","title":"Home"},{"location":"#planager","text":"This is the in-progress documentation site for the Planager!","title":"Planager"},{"location":"#project-layout","text":"src/ planager/ app/ docs/ # Documentation website things mkdocs.yml # Documentation config","title":"Project layout"},{"location":"about/","text":"About Made by @branchwelder at Machine Agency !","title":"About"},{"location":"about/#about","text":"Made by @branchwelder at Machine Agency !","title":"About"},{"location":"contributing/","text":"Contributing Project layout src/ planager/ app/ docs/ # Documentation website things mkdocs.yml # Documentation config VSCode Everyone has their preferences when it comes to IDEs and debuggers, but I find VSCode to work well for me. I use the following launch.json configuration in the VSCode debugger: { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Python: Current File\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"${file}\", \"console\": \"integratedTerminal\" }, { \"name\": \"gunicorn\", \"request\": \"launch\", \"command\": \"python -m gunicorn -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker -w 1 run:app\", \"type\": \"node-terminal\" }, { \"command\": \"npm run watch\", \"name\": \"frontend\", \"request\": \"launch\", \"type\": \"node-terminal\" }, { \"name\": \"python flask backend\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"run.py\", \"gevent\": true, \"env\": { \"GEVENT_SUPPORT\": \"True\" }, \"console\": \"integratedTerminal\" } ], \"compounds\": [ { \"name\": \"full stack\", \"configurations\": [\"frontend\", \"python flask backend\"] } ] } The compound rule full stack will run both the frontend and backend configurations! One thing to note is that the Python configuration has to be run with the GEVENT_SUPPORT flag set to true, or else some crucial Flask things will not work. Editing Documentation We use mkdocs to generate documentation for the Planager. mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#project-layout","text":"src/ planager/ app/ docs/ # Documentation website things mkdocs.yml # Documentation config","title":"Project layout"},{"location":"contributing/#vscode","text":"Everyone has their preferences when it comes to IDEs and debuggers, but I find VSCode to work well for me. I use the following launch.json configuration in the VSCode debugger: { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Python: Current File\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"${file}\", \"console\": \"integratedTerminal\" }, { \"name\": \"gunicorn\", \"request\": \"launch\", \"command\": \"python -m gunicorn -k geventwebsocket.gunicorn.workers.GeventWebSocketWorker -w 1 run:app\", \"type\": \"node-terminal\" }, { \"command\": \"npm run watch\", \"name\": \"frontend\", \"request\": \"launch\", \"type\": \"node-terminal\" }, { \"name\": \"python flask backend\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"run.py\", \"gevent\": true, \"env\": { \"GEVENT_SUPPORT\": \"True\" }, \"console\": \"integratedTerminal\" } ], \"compounds\": [ { \"name\": \"full stack\", \"configurations\": [\"frontend\", \"python flask backend\"] } ] } The compound rule full stack will run both the frontend and backend configurations! One thing to note is that the Python configuration has to be run with the GEVENT_SUPPORT flag set to true, or else some crucial Flask things will not work.","title":"VSCode"},{"location":"contributing/#editing-documentation","text":"We use mkdocs to generate documentation for the Planager. mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Editing Documentation"}]}